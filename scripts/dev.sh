#!/bin/bash

# üõ†Ô∏è Script de d√©veloppement pour Medical LLM Platform
# Usage: ./scripts/dev.sh [command]

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

show_help() {
    echo "üõ†Ô∏è  Medical LLM Platform - Script de d√©veloppement"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands disponibles:"
    echo "  start, dev     - D√©marrer le serveur de d√©veloppement"
    echo "  build          - Builder le projet"
    echo "  test           - Lancer les tests"
    echo "  lint           - V√©rifier le linting"
    echo "  lint:fix       - Corriger automatiquement le linting"
    echo "  install        - Installer les d√©pendances"
    echo "  clean          - Nettoyer les fichiers de build"
    echo "  setup          - Configuration initiale du projet"
    echo "  check          - V√©rifications compl√®tes (lint + build + test)"
    echo "  status         - Status git et informations projet"
    echo "  help           - Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 start       # D√©marrer en mode d√©veloppement"
    echo "  $0 check       # V√©rifications compl√®tes avant commit"
    echo "  $0 setup       # Configuration initiale"
}

# Commande par d√©faut
COMMAND=${1:-dev}

case $COMMAND in
    "start"|"dev")
        log_info "üöÄ D√©marrage du serveur de d√©veloppement..."
        npm run dev
        ;;
    
    "build")
        log_info "üî® Build du projet..."
        npm run build
        if [ $? -eq 0 ]; then
            log_success "Build r√©ussi!"
        else
            log_error "√âchec du build"
            exit 1
        fi
        ;;
    
    "test")
        log_info "üß™ Ex√©cution des tests..."
        if [ -f "jest.config.js" ]; then
            npm test
        else
            log_warning "Aucune configuration de test trouv√©e"
        fi
        ;;
    
    "lint")
        log_info "üßπ V√©rification du linting..."
        npm run lint
        ;;
    
    "lint:fix")
        log_info "üîß Correction automatique du linting..."
        npm run lint -- --fix
        log_success "Linting corrig√©!"
        ;;
    
    "install")
        log_info "üì¶ Installation des d√©pendances..."
        npm install
        log_success "D√©pendances install√©es!"
        ;;
    
    "clean")
        log_info "üßπ Nettoyage des fichiers de build..."
        rm -rf .next
        rm -rf dist
        rm -rf build
        npm run build > /dev/null 2>&1 || true
        log_success "Nettoyage termin√©!"
        ;;
    
    "setup")
        log_info "‚öôÔ∏è  Configuration initiale du projet..."
        
        # V√©rifier Node.js
        if ! command -v node &> /dev/null; then
            log_error "Node.js n'est pas install√©"
            exit 1
        fi
        
        NODE_VERSION=$(node --version)
        log_info "Node.js version: $NODE_VERSION"
        
        # Installer les d√©pendances
        log_info "üì¶ Installation des d√©pendances..."
        npm install
        
        # Copier le fichier d'environnement
        if [ ! -f ".env.local" ]; then
            if [ -f ".env.local.example" ]; then
                log_info "üìù Cr√©ation du fichier .env.local..."
                cp .env.local.example .env.local
                log_warning "N'oubliez pas de configurer vos variables d'environnement dans .env.local"
            fi
        fi
        
        # Build initial
        log_info "üî® Build initial..."
        npm run build
        
        log_success "Configuration termin√©e! Vous pouvez maintenant lancer 'npm run dev'"
        ;;
    
    "check")
        log_info "üîç V√©rifications compl√®tes..."
        
        # Linting
        log_info "1/3 - V√©rification du linting..."
        npm run lint
        
        # Build
        log_info "2/3 - Build du projet..."
        npm run build
        
        # Tests (si disponibles)
        log_info "3/3 - Tests..."
        if [ -f "jest.config.js" ]; then
            npm test
        else
            log_info "Aucun test configur√©, on passe..."
        fi
        
        log_success "Toutes les v√©rifications sont pass√©es! ‚ú®"
        ;;
    
    "status")
        log_info "üìä Status du projet..."
        echo ""
        
        # Version du projet
        VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
        echo "üì¶ Version: $VERSION"
        
        # Branche Git
        BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "Pas de git")
        echo "üåø Branche: $BRANCH"
        
        # Status Git
        if command -v git &> /dev/null && [ -d ".git" ]; then
            echo ""
            log_info "Git status:"
            git status --short
            
            # V√©rifier s'il y a des commits en avance/retard
            if [ "$BRANCH" != "HEAD" ]; then
                AHEAD=$(git rev-list --count origin/$BRANCH..$BRANCH 2>/dev/null || echo "0")
                BEHIND=$(git rev-list --count $BRANCH..origin/$BRANCH 2>/dev/null || echo "0")
                
                if [ "$AHEAD" -gt 0 ]; then
                    echo "üì§ $AHEAD commit(s) en avance sur origin/$BRANCH"
                fi
                
                if [ "$BEHIND" -gt 0 ]; then
                    echo "üì• $BEHIND commit(s) en retard sur origin/$BRANCH"
                fi
            fi
        fi
        
        # Informations Node.js
        echo ""
        log_info "Environnement:"
        echo "üü¢ Node.js: $(node --version)"
        echo "üì¶ npm: $(npm --version)"
        
        # V√©rifier .env.local
        if [ -f ".env.local" ]; then
            echo "‚öôÔ∏è  .env.local: ‚úÖ"
        else
            echo "‚öôÔ∏è  .env.local: ‚ùå (utilisez './scripts/dev.sh setup')"
        fi
        ;;
    
    "help"|"-h"|"--help")
        show_help
        ;;
    
    *)
        log_error "Commande inconnue: $COMMAND"
        echo ""
        show_help
        exit 1
        ;;
esac
